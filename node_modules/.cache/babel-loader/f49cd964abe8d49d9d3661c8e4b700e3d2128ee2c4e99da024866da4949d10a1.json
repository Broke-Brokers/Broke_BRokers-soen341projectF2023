{"ast":null,"code":"import React from'react';import BrokerCard from'../property-page/BrokerCard.jsx';import'./Admin_Brokers_Grid.css';import{useState,useEffect}from\"react\";//allows connection to firebase\nimport{db}from'../../firebase_configuration.js';import{collection,doc,getDocs,addDoc,updateDoc,onSnapshot}from\"firebase/firestore\";import{jsx as _jsx}from\"react/jsx-runtime\";import{jsxs as _jsxs}from\"react/jsx-runtime\";function Admin_Brokers_Grid(){// Reading brokers\nconst[data,setData]=useState([]);const[records,setRecords]=useState([]);const myBrokers=collection(db,'Broker');useEffect(()=>{// Call the getBroker function to fetch the data when the component mounts\nconst getBroker=async()=>{onSnapshot(myBrokers,snapshot=>{setData(snapshot.docs.map(doc=>doc.data()));setRecords(snapshot.docs.map(doc=>doc.data()));});};getBroker();},[]);//MANUAL CRUD: to store in firebase\n//1. FOR CREATE Take user input from setNew to have a new variable using new...\nconst[newBrokerID,setNewBrokerID]=useState(0);const[newUserTypeID,setNewUserTypeID]=useState(0);const[newClientFileID,setNewClientFileID]=useState(0);const[newFirstName,setNewFirstName]=useState(\"\");const[newLastName,setNewLastName]=useState(\"\");const[newUserName,setNewUserName]=useState(\"\");const[newEmail,setNewEmail]=useState(\"\");const[newPassword,setNewPassword]=useState(\"\");const[newPhoneNumber,setNewPhone]=useState(\"\");//2.FOR UPDATE\nconst[firebaseID,setFirebaseID]=useState(\"\");const[show,setShow]=useState(false);const[brokers,setBrokers]=useState([]);//reference the broker collection in the databse of firebase\nconst brokersCollectionRef=collection(db,\"Broker\");useEffect(()=>{const getBrokers=async()=>{//get all the data in broker collection\nconst data=await getDocs(brokersCollectionRef);//setting brokers array = array of document data & id for each document\nsetBrokers(data.docs.map(doc=>({...doc.data(),id:doc.id})));};getBrokers();},[]);//MANUAL CRUD: \n//1.FOR CREATE: function that create a broker when click on create broker\nconst createBroker=async()=>{await addDoc(brokersCollectionRef,{BrokerID:newBrokerID,UsertypeID:newUserTypeID,ClientFileID:newClientFileID,FirstName:newFirstName,LastName:newLastName,Username:newUserName,Email:newEmail,Password:newPassword,PhoneNumber:newPhoneNumber});};//2.FOR UPDATE\n//2.1 Get id of document in firebase and previous inputs\nconst modifyBroker=async(firebaseID,BrokerID,UsertypeID,ClientFileID,FirstName,LastName,Username,Email,Password,PhoneNumber)=>{setFirebaseID(firebaseID);setNewBrokerID(BrokerID);setNewUserTypeID(UsertypeID);setNewClientFileID(ClientFileID);setNewFirstName(FirstName);setNewLastName(LastName);setNewUserName(Username);setNewEmail(Email);setNewPassword(Password);setNewPhone(PhoneNumber);setShow(true);};const updateBroker=async()=>{const updateData=doc(db,\"Broker\",firebaseID);await updateDoc(updateData,{BrokerID:newBrokerID,UsertypeID:newUserTypeID,ClientFileID:newClientFileID,FirstName:newFirstName,LastName:newLastName,Username:newUserName,Email:newEmail,Password:newPassword,PhoneNumber:newPhoneNumber});setShow(false);setNewBrokerID(0);setNewUserTypeID(0);setNewClientFileID(0);setNewFirstName(\"\");setNewLastName(\"\");setNewUserName(\"\");setNewEmail(\"\");setNewPassword(\"\");setNewPhone(\"\");};return/*#__PURE__*/ (//CRUD MANUALLY NOT INSIDE GRID\n//1. FOR CREATE: setNew...the value entered by user \n_jsxs(\"div\",{children:[records.map((broker,index)=>/*#__PURE__*/_jsx(BrokerCard,{brokerList:broker},index)// Use a unique 'key' prop for each element\n),/*#__PURE__*/_jsxs(\"div\",{className:\"Admin_Brokers_Grid\",children:[/*#__PURE__*/_jsx(\"input\",{type:\"number\",placeholder:\"Broker ID...\",onChange:event=>{setNewBrokerID(event.target.value);}}),/*#__PURE__*/_jsx(\"input\",{type:\"numberevent\",placeholder:\"User type ID...\",onChange:event=>{setNewUserTypeID(event.target.value);}}),/*#__PURE__*/_jsx(\"input\",{type:\"number\",placeholder:\"Client File ID...\",onChange:event=>{setNewClientFileID(event.target.value);}}),/*#__PURE__*/_jsx(\"input\",{placeholder:\"First name...\",onChange:event=>{setNewFirstName(event.target.value);}}),/*#__PURE__*/_jsx(\"input\",{placeholder:\"Last name...\",onChange:event=>{setNewLastName(event.target.value);}}),/*#__PURE__*/_jsx(\"input\",{placeholder:\"username...\",onChange:event=>{setNewUserName(event.target.value);}}),/*#__PURE__*/_jsx(\"input\",{placeholder:\"email...\",onChange:event=>{setNewEmail(event.target.value);}}),/*#__PURE__*/_jsx(\"input\",{placeholder:\"password...\",onChange:event=>{setNewPassword(event.target.value);}}),/*#__PURE__*/_jsx(\"input\",{placeholder:\"Phone number(xxx-xxx-xxxx)...\",onChange:event=>{setNewPhone(event.target.value);}}),!show?/*#__PURE__*/_jsx(\"button\",{onClick:createBroker,children:\" Create Broker\"}):/*#__PURE__*/_jsx(\"button\",{onClick:()=>{updateBroker();},children:\"Update\"})]}),brokers.map(broker=>{return/*#__PURE__*/_jsxs(\"div\",{children:[\"\",/*#__PURE__*/_jsxs(\"h2\",{children:[\" Broker ID: \",broker.BrokerID,\" \"]}),/*#__PURE__*/_jsxs(\"h2\",{children:[\" User Type ID: \",broker.UsertypeID,\" \"]}),/*#__PURE__*/_jsxs(\"h2\",{children:[\" Client File ID: \",broker.ClientFileID,\" \"]}),/*#__PURE__*/_jsxs(\"h2\",{children:[\" First name: \",broker.FirstName,\" \"]}),/*#__PURE__*/_jsxs(\"h2\",{children:[\" Last Name: \",broker.LastName,\" \"]}),/*#__PURE__*/_jsxs(\"h2\",{children:[\" Username: \",broker.Username,\" \"]}),/*#__PURE__*/_jsxs(\"h2\",{children:[\" Email: \",broker.Email,\" \"]}),/*#__PURE__*/_jsxs(\"h2\",{children:[\" Password: \",broker.Password,\" \"]}),/*#__PURE__*/_jsxs(\"h2\",{children:[\" Phone Number: \",broker.PhoneNumber,\" \"]}),/*#__PURE__*/_jsx(\"button\",{onClick:()=>{modifyBroker(broker.firebaseID,broker.BrokerID,broker.UsertypeID,broker.ClientFileID,broker.FirstName,broker.LastName,broker.Username,broker.Email,broker.Password,broker.PhoneNumber);},children:\" Modify\"})]});})]}));}export default Admin_Brokers_Grid;","map":{"version":3,"names":["React","BrokerCard","useState","useEffect","db","collection","doc","getDocs","addDoc","updateDoc","onSnapshot","jsx","_jsx","jsxs","_jsxs","Admin_Brokers_Grid","data","setData","records","setRecords","myBrokers","getBroker","snapshot","docs","map","newBrokerID","setNewBrokerID","newUserTypeID","setNewUserTypeID","newClientFileID","setNewClientFileID","newFirstName","setNewFirstName","newLastName","setNewLastName","newUserName","setNewUserName","newEmail","setNewEmail","newPassword","setNewPassword","newPhoneNumber","setNewPhone","firebaseID","setFirebaseID","show","setShow","brokers","setBrokers","brokersCollectionRef","getBrokers","id","createBroker","BrokerID","UsertypeID","ClientFileID","FirstName","LastName","Username","Email","Password","PhoneNumber","modifyBroker","updateBroker","updateData","children","broker","index","brokerList","className","type","placeholder","onChange","event","target","value","onClick"],"sources":["C:/Users/eliann/SOEN341_project/Broke_BRokers-soen341projectF2023/src/components/Profile-page/Admin_Brokers_Grid.jsx"],"sourcesContent":["import React from 'react';\r\nimport BrokerCard from '../property-page/BrokerCard.jsx';\r\nimport './Admin_Brokers_Grid.css';\r\nimport {useState, useEffect} from \"react\";\r\n//allows connection to firebase\r\nimport {db} from '../../firebase_configuration.js'\r\nimport { collection, doc, getDocs, addDoc, updateDoc, onSnapshot} from \"firebase/firestore\";\r\n\r\n\r\n\r\nfunction Admin_Brokers_Grid(){\r\n  \r\n // Reading brokers\r\n   const [data, setData] = useState([]);\r\n    const [records, setRecords] = useState([])\r\n    const myBrokers = collection(db, 'Broker');\r\n  \r\n    useEffect(() => {\r\n      // Call the getBroker function to fetch the data when the component mounts\r\n      const getBroker = async () => {\r\n\r\n        onSnapshot(myBrokers,(snapshot)=>{\r\n          setData(snapshot.docs.map(doc=>doc.data()));\r\n          setRecords(snapshot.docs.map(doc=>doc.data()));\r\n\r\n\r\n        })\r\n        \r\n      };\r\n      getBroker();\r\n    }, []); \r\n  \r\n\r\n//MANUAL CRUD: to store in firebase\r\n   //1. FOR CREATE Take user input from setNew to have a new variable using new...\r\nconst[newBrokerID, setNewBrokerID]= useState(0)\r\nconst[newUserTypeID, setNewUserTypeID]= useState(0)\r\nconst[newClientFileID, setNewClientFileID]= useState(0)\r\nconst[newFirstName, setNewFirstName]= useState(\"\")\r\nconst[newLastName, setNewLastName]= useState(\"\")\r\nconst[newUserName, setNewUserName]= useState(\"\")\r\nconst[newEmail, setNewEmail]= useState(\"\")\r\nconst[newPassword, setNewPassword]= useState(\"\")\r\nconst[newPhoneNumber, setNewPhone]= useState(\"\")\r\n//2.FOR UPDATE\r\nconst[firebaseID, setFirebaseID]= useState(\"\")\r\nconst [show,setShow] = useState(false)\r\n\r\n\r\n\r\n\r\n const [brokers, setBrokers]=useState([]);\r\n //reference the broker collection in the databse of firebase\r\n const brokersCollectionRef = collection (db,\"Broker\")\r\n\r\n\r\n\r\n useEffect(() => {\r\n  const getBrokers = async()=>{\r\n    //get all the data in broker collection\r\n    const data = await getDocs(brokersCollectionRef);\r\n    //setting brokers array = array of document data & id for each document\r\n    setBrokers(data.docs.map((doc)=>({...doc.data(), id:doc.id})));\r\n\r\n    \r\n  };\r\n  getBrokers();\r\n },[])\r\n\r\n\r\n\r\n//MANUAL CRUD: \r\n//1.FOR CREATE: function that create a broker when click on create broker\r\nconst createBroker = async()=>{\r\n  await addDoc(brokersCollectionRef,{\r\n    BrokerID: newBrokerID,\r\n    UsertypeID: newUserTypeID,\r\n    ClientFileID: newClientFileID,\r\n    FirstName:newFirstName,\r\n    LastName:newLastName,\r\n    Username:newUserName,\r\n    Email:newEmail,\r\n    Password:newPassword,\r\n    PhoneNumber:newPhoneNumber\r\n  });\r\n  }\r\n  //2.FOR UPDATE\r\n     //2.1 Get id of document in firebase and previous inputs\r\n  const modifyBroker = async(firebaseID, BrokerID, UsertypeID, ClientFileID, \r\n    FirstName, LastName, Username, Email,Password, PhoneNumber )=>{\r\n  \r\n      setFirebaseID(firebaseID)\r\n      setNewBrokerID(BrokerID)\r\n      setNewUserTypeID(UsertypeID)\r\n      setNewClientFileID(ClientFileID)\r\n      setNewFirstName(FirstName)\r\n      setNewLastName(LastName)\r\n      setNewUserName(Username)\r\n      setNewEmail(Email)\r\n      setNewPassword(Password)\r\n      setNewPhone(PhoneNumber)\r\n      setShow(true)\r\n  }\r\n  \r\n  const updateBroker = async()=>{\r\n  const updateData= doc(db,\"Broker\",firebaseID)\r\n  await updateDoc(updateData,{\r\n    BrokerID: newBrokerID,\r\n    UsertypeID: newUserTypeID,\r\n    ClientFileID: newClientFileID,\r\n    FirstName:newFirstName,\r\n    LastName:newLastName,\r\n    Username:newUserName,\r\n    Email:newEmail,\r\n    Password:newPassword,\r\n    PhoneNumber:newPhoneNumber\r\n  })\r\n  setShow(false)\r\n  setNewBrokerID(0)\r\n  setNewUserTypeID(0)\r\n  setNewClientFileID(0)\r\n  setNewFirstName(\"\")\r\n  setNewLastName(\"\")\r\n  setNewUserName(\"\")\r\n  setNewEmail(\"\")\r\n  setNewPassword(\"\")\r\n  setNewPhone(\"\")\r\n}\r\n\r\n\r\n  return (\r\n\r\n\r\n   \r\n\r\n\r\n\r\n     //CRUD MANUALLY NOT INSIDE GRID\r\n      //1. FOR CREATE: setNew...the value entered by user \r\n    <div>\r\n     {records.map((broker, index) => (\r\n        <BrokerCard key={index} brokerList={broker} /> // Use a unique 'key' prop for each element\r\n      ))}\r\n  \r\n  \r\n  <div className=\"Admin_Brokers_Grid\">\r\n\r\n\r\n    <input type='number' placeholder='Broker ID...'\r\n       onChange={(event)=> {\r\n        setNewBrokerID(event.target.value);\r\n      }}\r\n    />\r\n    <input type='numberevent' placeholder='User type ID...'\r\n    onChange={(event)=>{\r\n      setNewUserTypeID(event.target.value);\r\n    }}\r\n    />\r\n    <input type='number' placeholder='Client File ID...'\r\n    onChange={(event)=> {\r\n      setNewClientFileID(event.target.value);\r\n    }}\r\n    />\r\n    <input placeholder='First name...'\r\n     onChange={(event)=> {\r\n      setNewFirstName(event.target.value);\r\n    }}\r\n    />\r\n    <input placeholder='Last name...'\r\n     onChange={(event)=> {\r\n      setNewLastName(event.target.value);\r\n    }}\r\n    />\r\n    <input placeholder='username...'\r\n     onChange={(event)=> {\r\n      setNewUserName\r\n    (event.target.value);\r\n    }}\r\n    />\r\n    <input placeholder='email...'\r\n     onChange={(event)=> {\r\n      setNewEmail(event.target.value);\r\n    }}\r\n    />\r\n    <input placeholder='password...'\r\n     onChange={(event)=> {\r\n      setNewPassword(event.target.value);\r\n    }}\r\n    />\r\n    <input placeholder='Phone number(xxx-xxx-xxxx)...'\r\n    onChange={(event)=> {\r\n      setNewPhone(event.target.value);\r\n    }}\r\n    />\r\n\r\n{!show?<button onClick={createBroker}> Create Broker</button>:\r\n        <button onClick={()=>{updateBroker()}}>Update</button>\r\n}\r\n\r\n   \r\n</div>\r\n\r\n\r\n\r\n\r\n\r\n    {brokers.map((broker)=>{\r\n      return (\r\n      <div> \r\n        {\"\"}\r\n        <h2> Broker ID: {broker.BrokerID} </h2>\r\n        <h2> User Type ID: {broker.UsertypeID} </h2>\r\n        <h2> Client File ID: {broker.ClientFileID} </h2>\r\n        <h2> First name: {broker.FirstName} </h2>\r\n        <h2> Last Name: {broker.LastName} </h2>\r\n        <h2> Username: {broker.Username} </h2>\r\n        <h2> Email: {broker.Email} </h2>\r\n        <h2> Password: {broker.Password} </h2>\r\n        <h2> Phone Number: {broker.PhoneNumber} </h2>\r\n       \r\n\r\n       \r\n        <button onClick={()=>{modifyBroker(\r\n          broker.firebaseID,\r\n          broker.BrokerID,\r\n          broker.UsertypeID,\r\n          broker.ClientFileID,\r\n          broker.FirstName,\r\n          broker.LastName,\r\n          broker.Username,\r\n          broker.Email,\r\n          broker.Password,\r\n          broker.PhoneNumber\r\n        );}}\r\n        > Modify</button>\r\n\r\n\r\n        \r\n      </div>\r\n      );\r\n      })}\r\n  </div>\r\n  );\r\n}\r\n\r\nexport default Admin_Brokers_Grid;"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}